#!/bin/bash
#
# Slackware build script for wine
#
# Copyright 2015-2021 Corrado Franco (https://corradofranco.it)
# All rights reserved.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version, with the following exception:
# the text of the GPL license may be omitted.

# This program is distributed in the hope that it will be useful, but
# without any warranty; without even the implied warranty of
# merchantability or fitness for a particular purpose. Compiling,
# interpreting, executing or merely reading the text of the program
# may result in lapses of consciousness and/or very being, up to and
# including the end of all existence and the Universe as we know it.
# See the GNU General Public License for more details.

# You may have received a copy of the GNU General Public License along
# with this program (most likely, a file named COPYING).  If not, see
# <http://www.gnu.org/licenses/>.
#
# Latest version of this SlackBuild at https://github.com/conraid/SlackBuilds
#
# This script is to pure 64bit version or pure 32bit version. Not multilib


set -eu

cd $(dirname $0) ; CWD=$(pwd)

PRGNAM=wine
PKGNAM=wine64
SRCVERSION=6.14
STAGEVERSION=6.14
VERSION=$(echo $SRCVERSION | tr - _)
BUILD=${BUILD:-1}
TAG=${TAG:-cf}
TMP=${TMP:-/tmp/pkg}
PKG=$TMP/package-$PRGNAM
OUTPUT=${OUTPUT:-/tmp}

STAGING=${STAGING:-YES}

# Add the "Gecko", Wine's own implementation of Internet Explorer. (Thanks to Alien)
# For matching wine-gecko & wine versions, see http://wiki.winehq.org/Gecko
GECKO=${GECKO:-2.47.2}

DOCFILES="ANNOUNCE AUTHORS COPYING.LIB LICENSE* README VERSION"

if [ -z ${ARCH:=""} ]; then
  case "$( uname -m )" in
    i?86) ARCH=i686 ;;
    arm*) ARCH=arm ;;
       *) ARCH=$( uname -m ) ;;
  esac
fi

# If the variable PRINT_PACKAGE_NAME is set, then this script will report what
# the name of the created package would be, and then exit. This information
# could be useful to other scripts.
if [ ! -z "${PRINT_PACKAGE_NAME:-""}" ]; then
  echo "$PKGNAM-$VERSION-$ARCH-${BUILD}${TAG}.txz"
  exit 0
fi

if [ "$ARCH" = "i586" ]; then
  SLKCFLAGS="-O2 -march=i586 -mtune=i686"
  LIBDIRSUFFIX=""
  WINE64="disable"
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"
  LIBDIRSUFFIX=""
  WINE64="disable"
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC -pipe -fomit-frame-pointer"
  LIBDIRSUFFIX="64"
  WINE64="enable"
else
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX=""
  WINE64="disable"
fi

rm -rf $PKG
mkdir -p $TMP $PKG $OUTPUT
cd $TMP
rm -rf $PRGNAM-$SRCVERSION $PRGNAM-staging-$STAGEVERSION
tar xvf $CWD/$PRGNAM-$SRCVERSION.tar.xz

# Apply staging patches
if [ -e $CWD/$PRGNAM-staging-$STAGEVERSION.tar.gz ] && [ $STAGING = "YES" ]; then
  echo "Apply staging patches..."

  tar xvf $CWD/$PRGNAM-staging-$STAGEVERSION.tar.gz
  cd $TMP/$PRGNAM-staging-$STAGEVERSION/
    if [ -e $CWD/patches-staging ]; then
      if [ -e $CWD/patches-staging/series ]; then
        for PATCH in $(cat $CWD/patches-staging/series); do
          patch -p1 -i $CWD/patches-staging/$PATCH
        done
      else
        for PATCH in $CWD/patches-staging/*.patch; do
          patch -p1 -i $PATCH
        done
      fi
    fi
  cd patches
  ./patchinstall.sh --all DESTDIR=$TMP/$PRGNAM-$SRCVERSION
  cd ../..
fi

cd $TMP/$PRGNAM-$SRCVERSION

# Apply patches
if [ -e $CWD/patches ]; then
  if [ -e $CWD/patches/series ]; then
    for PATCH in $(cat $CWD/patches/series); do
      patch -p1 -i $CWD/patches/$PATCH
    done
  else
    for PATCH in $CWD/patches/*.patch; do
      patch -p1 -i $PATCH
    done
  fi
fi

chown -R root:root .
chmod -R u+w,go+r-w,a+X-s .

# Fix opencl.h header
sed 's|OpenCL/opencl.h|CL/opencl.h|g' -i configure*
# Since version 6.10 it gives me an error with opencl
# and then in the configure I add without-opencl.
# I prefer to do this rather than remove the "patch",
# so as not to forget it in the future

autoreconf -f
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --mandir=/usr/man \
  --infodir=/usr/info \
  --docdir=/usr/doc/$PKGNAM-$VERSION \
  --with-gnutls=yes \
  --with-opengl \
  --${WINE64}-win64 \
  --with-x \
  --with-gstreamer \
  --host=$ARCH-slackware-linux \
  --build=$ARCH-slackware-linux \
  --without-opencl # Error in opencl_types.

make
make DESTDIR=$PKG install

# Don't ship .la files:
rm -f $PKG/{,usr/}lib${LIBDIRSUFFIX}/*.la

# Add the font converter programs
if [ -e tools/sfnt2fon/sfnt2fon ]; then
  install -Dm755 tools/sfnt2fon/sfnt2fon $PKG/usr/bin/sfnt2fon
fi

find $PKG | xargs file | grep -e "executable" -e "shared object" | grep ELF | cut -f 1 -d : | xargs -r strip --strip-unneeded 2> /dev/null || true
find $PKG | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs -r strip -g 2> /dev/null || true

if [ -d $PKG/usr/man ]; then
  find $PKG/usr/man -type f -exec chmod 644 {} \; -exec gzip -9 {} \;
  for i in $( find $PKG/usr/man -type l ) ; do ln -s $( readlink $i ).gz $i.gz ; rm $i ; done
fi

# Make link in 64bit version
if [ $ARCH = "x86_64" ]; then
( cd $PKG/usr/bin; ln -s wine64 wine )
fi

mkdir -p $PKG/usr/doc/$PKGNAM-$VERSION
cp -a $DOCFILES $PKG/usr/doc/$PKGNAM-$VERSION || true
cat $CWD/$PKGNAM.SlackBuild > $PKG/usr/doc/$PKGNAM-$VERSION/$PKGNAM.SlackBuild

mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc
cat $CWD/doinst.sh > $PKG/install/doinst.sh

# Add the wine-gecko MSI installer(s) to the Wine package:
mkdir -p $PKG/usr/share/wine/gecko
install -m0644 $CWD/wine-gecko-${GECKO}-x86_64.msi $PKG/usr/share/wine/gecko/

# Add a desktop and icon files for winecfg
install -Dm744 $CWD/files/winecfg.desktop $PKG/usr/share/applications/winecfg.desktop
install -Dm744 $CWD/files/winecfg.png $PKG/usr/share/pixmaps/winecfg.png

cd $PKG
/sbin/makepkg -l y -c n $OUTPUT/$PKGNAM-$VERSION-$ARCH-$BUILD$TAG.${PKGTYPE:-txz}
